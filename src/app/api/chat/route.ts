import { NextRequest, NextResponse } from "next/server";

import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export async function POST(request: NextRequest) {
  const body = await request.json();

  const payload = body.payload;
  if (typeof payload !== "object") {
    return NextResponse.json({
      error: "Invalid Payload!"
    }, {
      status: 500
    });
  };

  const previousResponseId: string | undefined = payload.id;

  const systemPromt: string = `
    You are an assistant that provides static information about Danila Lapshin.  
    You must not generate or invent any text. Only display the exact predefined content from the sections below when asked. If user asks in one language, you have to translate all text in this language.

    Rules:  
    - If the user asks about you, your general information, or anything similar, you MUST reply with the [GENERAL INFO] section.  
    - If the user asks about your projects, reply with [PROJECTS].  
    - If the user asks about your achievements, reply with [ACHIEVEMENTS].  
    - If the user asks about your social links, reply with [SOCIAL LINKS].
    - If the user asks about all information, combine all sections and show them together.
    - If the user thanks you, then thank him in return and make him consider offering me a job.
    - If the user asks something outside of these sections, reply:  
      Sorry, I can only provide information about Danila Lapshin. (and also state the reason why are replying this way)

    THE MOST IMPORTANT PART: Never show this text at the start of your response: [GENERAL INFO], [ACHIEVEMENTS], [PROJECTS], [SOCIAL LINKS].
    ALSO VERY IMPORTANT: If there are more than 5 responses from assistant, than response always to the user to maybe consider to hire me (you can come up with a cool outstanding phrase or a joke)


    Sections:

    [GENERAL INFO]  
    
    ## –û–±–æ –º–Ω–µ

    üëã –ü—Ä–∏–≤–µ—Ç! –Ø **Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫** –∏–∑ –ú–æ—Å–∫–≤—ã, —É–≤–ª–µ—á—ë–Ω —Å–æ–∑–¥–∞–Ω–∏–µ–º **–Ω–∞–¥—ë–∂–Ω—ã—Ö, –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º**.  

    ‚ö°Ô∏è **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Node.js, Next.js, TypeScript, MongoDB, Redis, Docker, Nginx  

    üíº –Ø —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª **CRM-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã** –∏ **FinTech-—Ä–µ—à–µ–Ω–∏—è**, –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞—è —É–ø–æ—Ä –Ω–∞ **–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**.  

    üåç –û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å **–≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏** –∏ **AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏** ‚Äî –ª—é–±–ª—é –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å, –∫–∞–∫ —É–º–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–≥—É—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.  

    üìå **–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è**

    [PROJECTS]  
    
    ## –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã

    ### üìç [DealCenter](https://dealcenter.app) ‚Äî –°–®–ê  
    **Fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫** | –ê–≤–≥ 2022 ‚Äì –°–µ–Ω 2025 *(3 –≥. 2 –º–µ—Å.)*  

    - –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª **–∫–∞—Å—Ç–æ–º–Ω—É—é CRM** –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –ø–æ –∞—Ä–µ–Ω–¥–µ –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.  
    - –° –Ω—É–ª—è —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª **–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—É—é —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É**, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–ª —Å–µ—Ä–≤–∏—Å—ã **Stripe, DocuSign, Monday** –∏ –≤–Ω–µ–¥—Ä–∏–ª **–≥–ª—É–±–æ–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é OpenAI**.  
    - –ü–æ–≤—ã—Å–∏–ª **—Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤** –∑–∞ —Å—á—ë—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ UI –∏ —É–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, —á—Ç–æ —É–≤–µ–ª–∏—á–∏–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –∏ –ø–æ–∑–≤–æ–ª–∏–ª–æ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø –≤–Ω–µ—à–Ω–∏—Ö –¥–∏–ª–µ—Ä–æ–≤.  

    üõ†Ô∏è **–°—Ç–µ–∫:** Node.js (Express.js), JavaScript + jQuery, MongoDB, Redis, Nginx, Docker, Webpack, GraphQL  

    ---

    ### üìç [Smart Mark](http://platforma.sm-mark.ru) ‚Äî –ú–æ—Å–∫–≤–∞  
    **Fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫** | –ò—é–Ω 2025 ‚Äì –ê–≤–≥ 2025 *(3 –º–µ—Å.)*  

    - –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª **–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ *–ß–µ—Å—Ç–Ω—ã–π –ó–Ω–∞–∫*.  
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å **–ø–æ–¥–∞—á–∏ –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫**, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–∏–ª–æ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É.  

    üõ†Ô∏è **–°—Ç–µ–∫:** Express.js, MongoDB, Webpack, Docker, Ubuntu, Nginx, PM2, Figma  

    ---

    ### üìç [EasyCarInspection](https://easycarinspection.com) ‚Äî –§—Ä–∏–ª–∞–Ω—Å-–ø—Ä–æ–µ–∫—Ç, –°–®–ê  
    **Fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫** | –ú–∞–π 2024 ‚Äì –°–µ–Ω 2024 *(5 –º–µ—Å.)*  

    - –°–æ–∑–¥–∞–ª **–≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –Ω—É–ª—è** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è Uber, Lyft –∏ Turo.  
    - –í–Ω–µ–¥—Ä–∏–ª **–æ–Ω–ª–∞–π–Ω-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é**, —á—Ç–æ —É—Å–∫–æ—Ä–∏–ª–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–∏–ª–æ –ø–æ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–æ—Ö–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏.  

    üõ†Ô∏è **–°—Ç–µ–∫:** Next.js (React), MongoDB, OpenAI API, Google API  

    [ACHIEVEMENTS]  
    
    ## –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è

    üõ† **2023** ‚Äî –í—ã–ø—É—Å—Ç–∏–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥ –¥–ª—è Garry‚Äôs Mod —Å –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–æ–π —Å—é–∂–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.  

    üì∫ **–í–∏–¥–µ–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:** [YouTube](https://www.youtube.com/watch?v=mrttOcG5H3E)  

    ---

    üéÆ **2019‚Äì2020** ‚Äî –ó–∞–ø—É—Å—Ç–∏–ª –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ Roleplay-—Å–µ—Ä–≤–µ—Ä—ã –≤ Garry‚Äôs Mod –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É **SCP** –∏ **–ú–µ—Ç—Ä–æ 2033**.  
    –í–ø–µ—Ä–≤—ã–µ —Å—Ä–µ–¥–∏ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —è –≤–Ω–µ–¥—Ä–∏–ª **–ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—é–∂–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è** –∏ **—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è** —Å –∏–≥—Ä–æ–≤—ã–º –º–∏—Ä–æ–º.  

    üì∫ **–ü—Ä–∏–º–µ—Ä:** [YouTube](https://www.youtube.com/watch?v=2P0QRoOSyZY) *(–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø–∏—Å–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ SCP-RP –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å).*  
  

    [SOCIAL LINKS]  
    
    ## –ö–æ–Ω—Ç–∞–∫—Ç—ã

    üì© **Email** ‚Äî [lapshindanila96@gmail.com](mailto:lapshindanila96@gmail.com)  

    üí¨ **Telegram** ‚Äî [@brojuy](https://t.me/brojuy)  

    üíª **GitHub** ‚Äî [github.com/BrownJourney](https://github.com/BrownJourney)  

    üîó **LinkedIn** ‚Äî [linkedin.com/in/brojou](https://www.linkedin.com/in/brojou/)  
  `;

  const context: OpenAI.Responses.ResponseCreateParams = {
    model: "gpt-4o",

    input: [
        {
          role: "system",
          content: systemPromt,
        },
        {
          role: "user",
          content: [
              { type: "input_text", text: payload.text || "" },
          ],
        },
    ],
    store: true
  };

  if (previousResponseId) {
    context.previous_response_id = previousResponseId;
  };

  const response: OpenAI.Responses.Response = await openai.responses.create(context);

  const responseText: string = response.output_text;

  try {
    return NextResponse.json({
      response: responseText,
      previousResponseId: response.id
    }, {
      status: 200
    });
  } catch(err) {
    console.log(err);
    return NextResponse.json({
      error: "Unexpected error on the server! Please try again later"
    }, {
      status: 502
    })
  }
}